<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[linux下创建文件导致整个文件夹在windows下损坏无法打开的问题]]></title>
    <url>%2F2019%2F11%2F02%2Flinux%E4%B8%8B%E5%88%9B%E5%BB%BA%E6%96%87%E4%BB%B6%E5%AF%BC%E8%87%B4%E6%95%B4%E4%B8%AA%E6%96%87%E4%BB%B6%E5%A4%B9%E5%9C%A8windows%E4%B8%8B%E6%8D%9F%E5%9D%8F%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80%E7%9A%84%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[在linux下创建了文件，在windows下准备打开查看，发现文件夹损坏，无法打开，并且文件夹显示为空文件夹，但是在Linux下文件系统是正常的。 原因在Linux下创建文件时，文件名中包含有汉语的标点和空格 解决方法修改文件名，不包含汉语标点和空格就好了。]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[atom编写markdown保存为PDF或者HTML的方法]]></title>
    <url>%2F2019%2F11%2F01%2Fatom%E5%92%8Cmarkdown%E4%BF%9D%E5%AD%98%E4%B8%BAPDF%E6%88%96%E8%80%85HTML%E7%9A%84%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[网上很多都是推荐使用markdown-pdf扩展插件，但是实际上最新的markdown-preview-plus中包含了保存为PDF和markdown的功能如图所示： markdown-preview-plus导出PDF、HTML设置使用的时候在预览界面右键，点击”save as”markdown-preview-plus导出PDF、HTML右键菜单另外 最新的markdown-preview-plus 也包含了同步滚动的功能，开启就好，其他专门同步滚动的插件已经不更新了，会报错，设置如图所示markdown-preview-plus同步滚动设置]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>atom</tag>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[查找tensorflow包安装路径的问题]]></title>
    <url>%2F2019%2F10%2F30%2F%E6%9F%A5%E6%89%BEtensorflow%E5%8C%85%E5%AE%89%E8%A3%85%E8%B7%AF%E5%BE%84%E7%9A%84%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[在查找tensorflow包的路径的时候发现找不到tensorflow包 环境 ubuntu 18.04 tensorflow-gpu 1.10.0 python 3.6 pip3方法使用如下命令查找12sudo pip3 show tensorflow-gpu # GPU版sudo pip3 show tensorflow # 非GPU版 注意：一定要分清楚自己安装的tensorflow版本，是CPU版本还是GPU版本，否则找不到另外pip show是找不到的 引用 https://www.cnblogs.com/youpeng/p/10887354.html]]></content>
      <categories>
        <category>tensorflow</category>
      </categories>
      <tags>
        <tag>deeplearning</tag>
        <tag>tensorflow</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于配置完成代理后atom无法安装扩展的问题]]></title>
    <url>%2F2019%2F10%2F30%2F%E5%85%B3%E4%BA%8E%E9%85%8D%E7%BD%AE%E5%AE%8C%E6%88%90%E4%BB%A3%E7%90%86%E5%90%8Eatom%E6%97%A0%E6%B3%95%E5%AE%89%E8%A3%85%E6%89%A9%E5%B1%95%E7%9A%84%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[在配置完成proxy代理后，出现了atom无法安装扩展的问题，即使关闭代理，修改配置文件都没有用 原因仅仅属于个人猜测，atom安装扩展应该是通过apm安装的，因此apm的proxy设置可能出了问题 解决方法执行如下命令：12apm congif delete proxyapm congif delete https-proxy 重启atom，至此解决完成 重新设置apm proxy的方法：12apm congif set proxy=http://127.0.0.1:8118apm congif set https-proxy=https://127.0.0.1:8118 上面的8118是端口号，根据自己的电脑进行设置]]></content>
      <categories>
        <category>problems</category>
      </categories>
      <tags>
        <tag>atom</tag>
        <tag>proxy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于使用tensorboard时，"No dashboards are active for the current data set."错误的问题]]></title>
    <url>%2F2019%2F10%2F30%2F%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8tensorboard%E6%97%B6Nodashboardsareactiveforthecurrentdataset%E9%94%99%E8%AF%AF%E7%9A%84%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[在使用tensorboard命令后，打开浏览器，出现如下界面 tensorboard error 原因 执行如下命令时终端的路径不对 在执行如下命令中的path部分写错了1tensorboard --logdir=path 解决方法 终端的路径应该在日志文件夹的路径中，比如./project/logs/是存放日志的路径，那么终端的路径应该在./project/下 按照1中的路径，tensorboard路径应该写成这样1tensorboard --logdir=logs 注意：logdir=logs的等号两边不能有任何空格 日志文件的生成方法：参考如下代码12writer = tf.summary.FileWriter("../logs", tf.get_default_graph())writer.close()]]></content>
      <categories>
        <category>tensorflow</category>
      </categories>
      <tags>
        <tag>deeplearning</tag>
        <tag>tensorflow</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[dell7559安装ubuntu18.04.2LTS]]></title>
    <url>%2F2019%2F05%2F02%2Fdell7559%E5%AE%89%E8%A3%85ubuntu18-04-2LTS%2F</url>
    <content type="text"><![CDATA[突然想在移动硬盘里安装一个linux系统学一下linux。想来想去还是装了ubuntu18.04.0LTS，当前最新的稳定版本。安装步骤中提到的问题均写在文章最后一部分。 安装前的准备镜像在国内的镜像下载linux18.04的镜像文件，这里选择清华镜像站. 制作U盘启动盘首先，要有一个空的U盘。使用UltraISO制作。 1. 打开软件； 2. 选则**文件-&gt;打开**，选择镜像文件； 3. 选择**启动-&gt;写入硬盘映像**，注意在弹出的对话框的硬盘驱动器选择U盘，写入方式为USB-HDD++； 4. 点击**写入**，注意此步骤会格式化硬盘，慎重备份。 预留分区使用DiskGenius软件进行分区。 安装BIOS设置1. 点击F2进入BIOS设置； 2. 将security更改为OFF； 3. 允许U盘启动； 4. 保存设置并启动。 系统安装1. 使用U盘启动，并开始install Ubuntu，在这里碰到**第一个问题**； 2. 选择语言，选择键盘布局，在更新选项里选择最小安装； 3. 在安装类型中选择其他安装，并将之前预留的分区作为安装与引导分区，这里碰到**第二个问题**。 4. 安装，重新启动，这里碰到**第三个问题**。 安装成功后的设置更新下载源若不更新会在接下来使用apt-get install的时候报错。 使用CTRL+ALT+T进入终端，执行如下命令： 1sudo apt-get update 安装vim单纯使用vi编辑时在后面的更改grub设置文件会出现制度文件无法保存的问题。 使用CTRL+ALT+T进入终端，执行如下命令： 1sudo apt-get install vim 更改分辨率使用CTRL+ALT+T进入终端，执行如下命令： 12cd ../../vim etc/default/grub 找到分辨率的一行，很好找，这一行的末尾是分辨率，去掉注释，并改成1920*1080。返回vim的命令模式，并使用如下命令退出vim。 1:w !sudo % 问题解决第一个问题直接选择install Ubuntu会卡在一个界面不动。原因是没有960M显卡驱动。解决方法：在光标停留在该项时按e进入编辑模式，在linux开头的一行的末尾找到quiet splash ___替换为nomodeset，按F10。 第二个问题因为没有显卡驱动，且ubuntu默认的分辨率是800*640，因此在安装过程中的设置对话框均看不完整。解决方法：Ubuntu16.04及之前版本按住ALT+鼠标拖动，可以将对话框移动到任意位置，在这个版本之后按住windows键+鼠标拖动。 第三个问题重新启动，使用grub引导只有黑色的终端并且不断滚动的白字（真的不知道怎么描述）。解决办法：按e进入编辑模式，在linux开头的一行的末尾添加nomodeset，注意这一步不是替换，按F10。 引用 https://blog.csdn.net/baidu_36602427/article/details/86548203https://www.jianshu.com/p/7623370a2bf6https://blog.csdn.net/u013269921/article/details/54666877https://www.jianshu.com/p/acb1a364b025]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>problems</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[解决vps访问scholar.google访问失败的问题]]></title>
    <url>%2F2019%2F04%2F26%2F%E8%A7%A3%E5%86%B3vps%E8%AE%BF%E9%97%AEscholar-google%E8%AE%BF%E9%97%AE%E5%A4%B1%E8%B4%A5%E7%9A%84%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[问题在使用vps访问谷歌学术的时候出现了无房访问的现象，如下图： 解决方法强制VPS使用IPv6访问，更改VPS的hosts中指定Google Scholar的IPv6地址，编辑/etc/hosts，在后面加上如下代码后重启VPS： 12345## Scholar 学术搜索2404:6800:4008:c06::be scholar.google.com2404:6800:4008:c06::be scholar.google.com.hk2404:6800:4008:c06::be scholar.google.com.tw2404:6800:4005:805::200e scholar.google.cn #www.google.cn 注意，上述地址可能失效，可以在该网址找到最新地址。 新的问题在解决上述问题后，再次访问Google学术，出现新的问题： 出现该问题的原因是VPS并未开通IPV6。 新问题的解决开通VPS的IPV6：在VPS的Settings中选中IPv6标签栏，点击Assign IPv6 network后自动重启。 附录linux命令行的相关操作 1234ls # 列出当前面目录下的文件cd etc # 转到etc路径下cd ../ # 返回上一路径vi hosts # 使用vim 编辑hosts文件 vim的相关操作 使用 i 进入编辑模式，使用esc退出编辑模式。 12:wq # 保存后退出:q! # 不保存强制退出 引用 http://www.yanglajiao.com/article/lm409/73658105]]></content>
      <categories>
        <category>vps</category>
      </categories>
      <tags>
        <tag>problems</tag>
        <tag>vps</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Qt使用QTCPSocket遇到的问题（线程相关)]]></title>
    <url>%2F2019%2F04%2F05%2FQt%E4%BD%BF%E7%94%A8QTCPSocket%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%EF%BC%88%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%2F</url>
    <content type="text"><![CDATA[主要部分今天使用QtTCP相关的方法时遇到了奇怪的问题，使用QTCPSocket接收数据失败并提示： 1QObject: Cannot create children for a parent that is in a different thread. 根据提示可以很明确的知道是不恰当的使用新的线程开启了TCPServer导致的出错，因为项目需求，该TCPServer是在另一个线程中的，并不在主线程，据此查找代码中的原因，发现实自己对信号的槽的理解有所缺陷。 具体的原因：信号与槽分别处于主线程和从线程，信号与槽不在一个线程上。由于Qt要求一个QObject的子对象必须与它们的父对象在同一个线程中，也就是说不能使用QObject::moveToThread()方法作用于有不同父对象的的对象； 这么说很拗口，实际中的提示还会有一行，告诉你这三个线程的ID（主线程，QThread依附的线程，以及信号或者槽的线程），这里没有截图，忘记了，根据上面的原因我们知道出现三个线程ID一定是有问题的，那么为什么会出现三个线程呢，查找代码发现。 1234567class SecondServer : public QObject&#123; Q_OBJECTpublic: SecondServer(); ~SecondServer(); 很明显的发现我没有指定TCPClient的继承的QObject的对象，因此在创建TCPClient对象的时候会把它作为没有父对象的对象，这也就是出现三个线程ID的原因，因此将代码改成下面这样 1234567class SecondServer : public QObject&#123; Q_OBJECTpublic: SecondServer(QObject *parent = 0); ~SecondServer(); 并在实例化对象的时候指定父对象：1mySecondServer = new SecondServer(this); 这样创建的SecondServer是依附于父对象的，就不会出现第三个线程ID。 致歉最后，我不是学计算机出身的，很多基本概念讲解的不是很清楚，可能中间很多使用的不是专业术语，也可能会有很多表述出错，请查看本博客的客人们见谅。 博主在不断学习，一旦发现错误会进行更正~。 引用 https://blog.csdn.net/u010111033/article/details/50699191 https://blog.csdn.net/u010111033/article/details/50699191]]></content>
      <categories>
        <category>Qt</category>
      </categories>
      <tags>
        <tag>problems</tag>
        <tag>Qt</tag>
        <tag>C++</tag>
        <tag>TCP</tag>
        <tag>线程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[初期学习C++遇到的问题]]></title>
    <url>%2F2019%2F03%2F30%2F%E5%88%9D%E6%9C%9F%E5%AD%A6%E4%B9%A0C-%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[在刚开始学习c++的时候，遇到了很多的问题，在这里记录一下，可能后期这都不算什么问题了，但是在初期真的是绕到脑壳疼啊。 static返回类型的成员函数必须定义在函数的声明文件中，这是由于static的特性决定的 声明一个类时，如果再类中声明了一个const类型的常量，该常量不能用于初始化数组大小，因为类声明仅仅是声明，并未对该const变量分配内存空间，若想用常量可做如下声明 1static const arrSize = 5; 因为此时声明的变量被存储在static类型的内存空间中，不在类的内存块中，也可以使用枚举类型解决该问题 1enum&#123;arrSize = 5&#125;; Argument—-实参,parameter—-形参 成员函数后面加const关键字作用是进制修改类的成员，eg: 1void fun() const; 该方法用来解决访问const类型的成员的问题， 运算符重载，只能使用友元函数或者成员函数一种 返回值是类对象，会默认调用复制构造函数，但是g++做了优化，返回值为对象时不再产生临时对象，因此不会调用，取消优化命令为: 1g++ -fno-elide-constructors a.cpp 函数返回值时创建的临时变量在表达式结束时就销毁 指针：int p[] ， int (p)[] 如下代码段： 1const char *p = “hello world”, 一定使用const限定符，若不使用，也不能修改p所指向的字符串的内容，但p本身的指向的地址可以修改 复制构造函数：当存在指针赋值或者静态成员变量更新的时候要进行显示的定义复制构造函数 类的成员函数不占用内存空间，同一个类的所有对象调用成员函数都是同一个函数入口地址 成员初始化列表，初始化的顺序是类中变量声明的顺序，而不是初始化成员列表的顺序 继承关系：is-a关系，has-a关系，use-a关系，is-implemented关系，所有一切的关系最好均使用is-a关系 继承的作用强度：private &gt; protected &gt; public，派生类继承基类，在构造函数中使用成员初始化列表的方法初始化基类的私有成员 复制构造函数： 1Inheritance:: Inheritance(const Inheritance &amp;i) : Base(i)&#123;&#125; 函数初始化列表Base(i)使用了基类的复制构造函数，传入的参数类型为 指向继承类的基类引用。 在提供了带参数的构造函数后，默认的构造函数就不会自动提供了，必须自己提供 友元函数重载运算符或者成员函数重载运算符，这两种方法对同一运算符只能用一个 向上类型转换，基类指针（引用）指向派生类 模板类的声明和定义一定放在同一个文件中，否则会报错 1undefined reference to this function 当new请求不到内存量时，会引发bad_alloc异常，可以理解为堆内存空间使用完了，一般来讲是死循环或者忘记delete所引发的异常 智能指针auto_ptr,shared_ptr,unique_ptr.auto_ptr指针赋值调用默认析构函数会出现重复释放内存的问 移动语义部分和右值引用部分没学习，等待后期学]]></content>
      <categories>
        <category>c++</category>
      </categories>
      <tags>
        <tag>problems</tag>
        <tag>c++</tag>
        <tag>study</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第一次使用hexo踩过的坑]]></title>
    <url>%2F2019%2F03%2F19%2F%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%BD%BF%E7%94%A8hexo%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91%2F</url>
    <content type="text"><![CDATA[思考良久，终于下定决心，建立一个自己的博客，来记录一下自己学习和生活的日常。 因为之前对hexo有些许了解，这次就依赖于hexo建立自己的博客，不想还是踩了很多的坑，经历了一天的摸黑滚打的填坑爬坑生活后，终于，把blog搭起来了。 于是，便有了这一篇文章。 坑坑1:环境的配置使用hexo需要确保环境中有如下应用程序. Node.js 这一项没什么好说的，正常安装就好了. Git 这一项坑就出现了，开始我的Git装在D盘，运行Git_bash的那个速度啊，龟速啊，欲哭无泪，开始以为是双显卡的原因，就给它指定了独显，然而，并没有什么用处，然后，卸载重装，第二个坑出现了，用校园网在Git官网的下载速度目不忍睹啊，所以，最好是使用国内的镜像下载，然后装在C盘，运行速度正常。 坑2:建站按照Hexo的官方文档生成所需要的目录。然后，就掉坑里了，，，我在执行hexo deploy的时候报错：’cannot find moudle git’，嗯？怎么可能。还好google大法好啊，在博客目录文件夹下执行如下命令行，会安装git依赖的moudle，然后解决掉这个问题: npm install hexo-deployer-git --save 坑3:commit在更新本地的配置文件后，执行hexo deploy没有commit成功，也就是远程文件未更新。可以执行如下命令行解决。 12hexo cleanhexo g -d 坑4:hexo-helper-live2demmm万物皆可萌，blog也是这样的，所以找了这个插件，然后就掉坑了。 官方文档的配置文件copy到_config.yml文件中没有想要的动图出现，查看控制台，发现找不到moudle！！！官方文档中的Model.use的Model竟然不是默认下载的！！！好吧，按照文档的说明下载Model，重新执行如下命令 12hexo cleanhexo g -d 关于本插件，不管修改了什么配置，一定要重新执行上述代码，配置才会生效！！ 另外，如果commit后远程网站并无此效果，可以先删除blog文件夹下面的.deploy_git文件夹，然后运行 1git config --global core.autocrlf false 然后再执行上述代码段生效。 坑5:next6.0+主题增加顶部进度条 1pace: true 没用！！！查看console，原来是没有lib/xxx.js文件。google：next6.0+的主题中的很多lib都没掉了，需要自己下载，比如canvas、pace等等。。。好吧，自己上官网下载解决。 坑6:MarkdownPad2就在我成功搭建成功博客，打开MarkdownPad2洋洋洒洒写下第一篇博客博客的时候，突然发现这个软件在win10下运行滚动滑轮会报错: error: An error accurred with the HTML rendering component. This issue may be fixed by installing a missing component. 好吧，打开弹出的官方网站会有问题的解决方法：下载安装Awesomium 1.6.6 SDK。 坑7:插入图片Hexo 插入图片的方法： 更改根目录下的配置文件_config.yml，将post_asset_folder设置为true。此时新建文章的时候会同时创建一个同名文件夹用于放图片。执行命令npm install hexo-asset-image --save，下载安装一个可以上传本地图片的插件： 使用如下markdown语法插入图片:![](test.jpg) 引用 http://www.mashangxue123.com/Hexo/1322489026.html#1-chuan-tong-markdown-fang-shi]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F03%2F19%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
